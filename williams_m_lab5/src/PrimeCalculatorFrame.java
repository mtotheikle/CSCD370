
import javax.swing.JOptionPane;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Simple GUI frame for calculating the nearest 10 prime numbers.
 * 
 * While it only shows the nearest 10, it calculates all prime numbers from a given
 * number to make program slower
 * 
 * @author Michael Williams
 * @modified 5/5/12 - Initial layout
 * @modified 5/9/12 - Code clean up and functionality
 */
public class PrimeCalculatorFrame extends javax.swing.JFrame {

    /**
     * Creates new form PiCalculatorFrame
     */
    public PrimeCalculatorFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startingText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Prime Number Calculator");
        setBackground(new java.awt.Color(0, 102, 0));
        setResizable(false);

        startingText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startingTextActionPerformed(evt);
            }
        });

        jLabel1.setText("Closest Below:");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel3.setText("Finding closest 10 Primes");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jProgressBar1.setToolTipText("");

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/primes-50.png"))); // NOI18N

        jButton1.setText("Calculate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(26, 26, 26)
                                .add(jLabel4))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(jLabel1)
                                        .add(startingText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jButton1))))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(28, 28, 28)
                                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 244, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jProgressBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(58, 58, 58))))
                    .add(layout.createSequentialGroup()
                        .add(42, 42, 42)
                        .add(jLabel3)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(18, 18, 18)
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(startingText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18))
                    .add(layout.createSequentialGroup()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                        .add(24, 24, 24)))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jProgressBar1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(38, 38, 38))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startingTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startingTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_startingTextActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        if (calculating) {
            JOptionPane.showMessageDialog(null, "Please wait until current calculation is complete");
            
            return;
        }
        
        if (isNumeric(startingText.getText())) {
            calculating = true;
            new Thread(new Calculator()).start(); //Start the thread
        } else {
            JOptionPane.showMessageDialog(null, "Please enter a numaric closest below value");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        
        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new PrimeCalculatorFrame().setVisible(true);
            }
        });
    }
    
    
    
    // isNumeric:: Check to make sure the string is numeric.
    // Written to us JAVA exceptions. (efa) 3/31/08
    // ***************************************************************
    public boolean isNumeric(String str) {
        try {
            Double.parseDouble(str);
        } catch (Exception e) {
            // Print out the exception that occurred
            // System.out.println(urlStr+": "+e.getMessage());

            return (false);
        }

        return (true);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    protected javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    protected javax.swing.JTextArea jTextArea1;
    protected javax.swing.JTextField startingText;
    // End of variables declaration//GEN-END:variables

    protected boolean calculating = false;
    
    /**
     * Calculator is a simple calculator to find prime numbers
     * 
     * @author Michael Williams
     */
    public class Calculator implements Runnable{

        /**
         * Does all the prime number calculation and number updating inside a thread
         * 
         */
        public void run(){
            
            int limit = Integer.parseInt(startingText.getText());
            int numFound = -1;
            int loopNum = 1;
            String primes = "";

            jProgressBar1.setValue(1); //Set value
            jProgressBar1.setString("1%");
            jProgressBar1.setStringPainted(true);
            jProgressBar1.repaint(); //Refresh graphics
                
            for (int number = (limit - 1); number > 1; number--) {
                
                if (isPrime(number) && numFound < 9) {
                    if ((numFound % 2) == 0) {
                        primes += number + "\n";
                    } else {
                        primes += number + " ";
                    }
                    
                    numFound++;
                }
                
                int percentComplete = (int) ((loopNum / (double) limit) * 100);
                if (percentComplete > 0) {
                    
                    jProgressBar1.setValue(percentComplete); //Set value
                    jProgressBar1.setString(percentComplete+"%");
                    jProgressBar1.setStringPainted(true);
                    jProgressBar1.repaint(); //Refresh graphics
                    
                    // Radomly pause program for 1 nanosecond
                    int rand = (int) 10 + ((int) Math.random() * (10 - 100));
                    if ((rand % 2) == 0) {
                        try{Thread.sleep(0, 1);}
                        catch (InterruptedException e){System.out.println(e.getMessage()); }
                    }
                }
                
                loopNum++;
            }
            
            // Set progress bar to 100 percent when done. We do not round so that is does not say 100 for too long
            jProgressBar1.setValue(100); //Set value
            jProgressBar1.setString("100%");
            jProgressBar1.setStringPainted(true);
            jProgressBar1.repaint(); //Refresh graphics 
            
            jTextArea1.setText(primes);
            calculating = false;
        }
        
        /**
         * Simple method to determine if a number is prime.
         * 
         * @param num
         * @return boolean true if num is prime
         */
        private boolean isPrime(int num)
        {
            // We will execute this full loop every time so that is is consistent
            // we want slow!
            boolean result = true;
            
            for (int i = 2; i < Math.sqrt(num); i++) {
                if ((num % i) == 0) {
                    // Number divided equally with i, not prime
                    return false;
                }
            }
            
            return true;
        }     
    }
}


